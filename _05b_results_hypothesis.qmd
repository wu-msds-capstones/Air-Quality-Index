---
title: "Result Hypothesis Testing"
format: html
#editor: visual
jupyter: r
execute:
  echo: true
  output: true
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

First, it is important to understand the trends of our data by running hypothesis tests to understand the significance of the data. We must know how our focus city (Portland) differs from the population of all large cities. We also want to test our predictions regarding the 2020 wildfire and whether or not Portland's transit system actually is significantly larger than others.


```{r}
library(dbplyr)
library(tidyverse)
library(lubridate)
```


```{r}
large_metro_data = read.csv('https://raw.githubusercontent.com/wu-msds-capstones/Air-Quality-Index/main/data/metro_1mil.csv')

portland_data = large_metro_data %>%
  filter(city == 'Portland' & state == 'Oregon')
```

```{r}

print(portland_data)
```

```{r}
library(prophet)
library(DBI)
library(dbplyr)
library(tidyverse)
library(RPostgres)
library(viridis)
library(rpivotTable)
```

First we want to connect our R instance to the database. We will use dbConnect with RPostgres to accomplish this.

```{r}
# con <- dbConnect(RPostgres::Postgres(),
#                  dbname = 'air',
#                  host = 'localhost',
#                  port = 5432,
#                  user = 'postgres',
#                  password = 'postgres')
```

For this small exploration, we will be taking a look at data for Portland. We will be using Prophet, a forecasting package created by Meta to do some quick analysis on Portland's AQI history and make a forecast for the future.


```{r}
#Portland Only
metro_1mil = read.csv('https://raw.githubusercontent.com/wu-msds-capstones/Air-Quality-Index/main/data/metro_1mil.csv')
# portland <- tbl(con, sql("SELECT * FROM air.air_quality
#                        LEFT JOIN air.dates USING (date_id)
#                        LEFT JOIN air.locations USING (location_id)
#                        LEFT JOIN air.aqi_categories USING (category_id)
#                        LEFT JOIN air.yearly_transit USING (yearly_transit_id)
#                        WHERE city = 'Portland' AND
#                        state = 'Oregon'
#                        ORDER BY date"))
```

To use the package, data must be in the format of a two column graph, with the first column being the date data, and the second being the variable being mapped and preddicted. In this case, we will be predicting AQI.
```{r}
portland_data = metro_1mil %>%
  filter(city == 'Portland' & state == 'Oregon')
#portland_data <- as.data.frame(portland)

pdx = portland_data %>%
  select(c(date, aqi)) %>%
  rename(
    ds = date,
    y = aqi
  )

head(pdx)
```